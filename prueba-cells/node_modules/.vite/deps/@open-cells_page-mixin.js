import {
  dedupeMixin
} from "./chunk-UEMNGQJU.js";
import {
  plugCellsCore
} from "./chunk-6DTDHGTD.js";
import "./chunk-F7YLLEUV.js";
import "./chunk-V6TY7KAL.js";

// node_modules/@open-cells/page-mixin/src/PageMixin.js
var PageMixinImpl = (base) => {
  return class extends base {
    static get BRIDGE_PAGE_PRIVATE_CHANNEL_PREFIX() {
      return "__oc_page_";
    }
    static getPagePrivateChannel(tagName) {
      return `${this.BRIDGE_PAGE_PRIVATE_CHANNEL_PREFIX}${tagName.toLowerCase().replace("-page", "")}`;
    }
    static get properties() {
      return {
        params: { type: Object }
      };
    }
    constructor() {
      super();
      plugCellsCore(this);
      this.params = {};
    }
    connectedCallback() {
      super.connectedCallback();
      this.__handleConnections();
    }
    __handleConnections() {
      if (this.__hasPageHandlers()) {
        this.__handlePagePrivateChannel();
      }
    }
    __hasPageHandlers() {
      return !!this.onPageEnter || !!this.onPageLeave;
    }
    __handlePagePrivateChannel() {
      const channelName = this.constructor.getPagePrivateChannel(this.tagName);
      const wrappedPrivateChannelCallback = this.__wrapPrivateChannelCallback();
      this.subscribe(channelName, wrappedPrivateChannelCallback);
    }
    __wrapPrivateChannelCallback() {
      return ({ value: pageStatusValue }) => {
        const callback = () => {
          if (pageStatusValue) {
            this.onPageEnter && this.onPageEnter();
          } else {
            this.onPageLeave && this.onPageLeave();
          }
        };
        if (callback) {
          callback();
        }
      };
    }
  };
};
var PageMixin = dedupeMixin(PageMixinImpl);
export {
  PageMixin
};
//# sourceMappingURL=@open-cells_page-mixin.js.map
